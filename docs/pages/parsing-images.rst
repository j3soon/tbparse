.. _tbparse_parsing-images:

===================================
Parsing Images
===================================

This page demonstrates the parsing process for image events.

.. contents:: Table of Contents
    :depth: 2
    :local:

Preparing Sample Event Logs
===================================

First, let's import some libraries and prepare the environment for our sample event logs:

.. plot::
   :context: close-figs

   >>> import os
   >>> import tempfile
   >>> import numpy as np
   >>> # Prepare temp dirs for storing event files
   >>> tmpdirs = {}

Before parsing a event file, we need to generate it first. The sample
event files are generated by three commonly used event log writers.

.. tabs::

   .. group-tab:: PyTorch

      We can generate the events by
      `PyTorch <https://pytorch.org/docs/stable/tensorboard.html>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['torch'] = tempfile.TemporaryDirectory()
         >>> from torch.utils.tensorboard import SummaryWriter
         >>> log_dir = tmpdirs['torch'].name
         >>> img = np.zeros((3, 100, 100))
         >>> img[0] = np.arange(0, 10000).reshape(100, 100) / 10000
         >>> img[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000
         >>> writer = SummaryWriter(log_dir)
         >>> writer.add_image('my_image', img, 0)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).images.columns
         Index(['step', 'my_image'], dtype='object')

   .. group-tab:: TensorFlow2 / Keras

      We can generate the events by
      `TensorFlow2 / Keras <https://www.tensorflow.org/tensorboard/get_started>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['tensorflow'] = tempfile.TemporaryDirectory()
         >>> import tensorflow as tf
         >>> log_dir = tmpdirs['tensorflow'].name
         >>> img = np.zeros((3, 100, 100))
         >>> img[0] = np.arange(0, 10000).reshape(100, 100) / 10000
         >>> img[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000
         >>> writer = tf.summary.create_file_writer(log_dir)
         >>> writer.set_as_default()
         >>> assert tf.summary.image('my_image', np.expand_dims(img.transpose(1, 2, 0), axis=0), 0)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).tensors.columns
         Index(['step', 'my_image'], dtype='object')

      .. WARNING:: The ``tf.summary.image`` function has a parameter ``max_outputs``
         that limits the maximum number of stored image instances.

      .. WARNING:: In the new versions of TensorFlow, the ``image`` method actually
         stores the events as ``tensors`` events inside the event file. Thus, you should perform
         an extra step with :meth:`~tbparse.SummaryReader.tensor_to_image` beforehand
         if the event file is generated by TensorFlow2. (An example is shown later)

   .. group-tab:: TensorboardX

      We can generate the events by
      `TensorboardX <https://tensorboardx.readthedocs.io/en/latest/tutorial.html>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['tensorboardX'] = tempfile.TemporaryDirectory()
         >>> from tensorboardX import SummaryWriter
         >>> log_dir = tmpdirs['tensorboardX'].name
         >>> img = np.zeros((3, 100, 100))
         >>> img[0] = np.arange(0, 10000).reshape(100, 100) / 10000
         >>> img[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000
         >>> writer = SummaryWriter(log_dir)
         >>> writer.add_image('my_image', img, 0)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).images.columns
         Index(['step', 'my_image'], dtype='object')

Parsing Event Logs
===================================

In different use cases, we will want to read the event logs in different styles.
We further show different configurations of the :class:`tbparse.SummaryReader` class.

Load Event File / Run Directory
-----------------------------------

.. tabs::

   .. group-tab:: PyTorch

      >>> from tbparse import SummaryReader
      >>> log_dir = tmpdirs['torch'].name
      >>> # Long Format
      >>> df = SummaryReader(log_dir).images
      >>> df.columns
      Index(['step', 'tag', 'value'], dtype='object')
      >>> # Wide Format
      >>> df = SummaryReader(log_dir, pivot=True).images
      >>> df.columns
      Index(['step', 'my_image'], dtype='object')

   .. group-tab:: TensorFlow2 / Keras

      >>> from tbparse import SummaryReader
      >>> log_dir = tmpdirs['tensorflow'].name
      >>> # Long Format
      >>> df = SummaryReader(log_dir).tensors
      >>> df.columns
      Index(['step', 'tag', 'value'], dtype='object')
      >>> image_dict_arr = df['value'].apply(SummaryReader.tensor_to_image)
      >>> df['value'] = image_dict_arr.apply(lambda x: x['image'])
      >>> df.columns
      Index(['step', 'tag', 'value'], dtype='object')
      >>> # Wide Format
      >>> df = SummaryReader(log_dir, pivot=True).tensors
      >>> df.columns
      Index(['step', 'my_image'], dtype='object')
      >>> image_dict_arr = df['my_image'].apply(SummaryReader.tensor_to_image)
      >>> df['my_image'] = image_dict_arr.apply(lambda x: x['image'])
      >>> df.columns
      Index(['step', 'my_image'], dtype='object')

   .. group-tab:: TensorboardX

      >>> from tbparse import SummaryReader
      >>> log_dir = tmpdirs['tensorboardX'].name
      >>> # Long Format
      >>> df = SummaryReader(log_dir).images
      >>> df.columns
      Index(['step', 'tag', 'value'], dtype='object')
      >>> # Wide Format
      >>> df = SummaryReader(log_dir, pivot=True).images
      >>> df.columns
      Index(['step', 'my_image'], dtype='object')

.. WARNING:: When accessing ``SummaryReader.images``, the events stored in
   each event file are collected internally. The best practice is to store the
   returned results in a DataFrame as shown in the samples, instead of repeatedly
   accessing ``SummaryReader.images``.

Extra Columns
-----------------------------------

See the :ref:`tbparse_extra-columns` page for more details.

Plotting Events
===================================

We further demonstrate some basic techniques for plotting our data.

.. tabs::

   .. group-tab:: PyTorch

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         from tbparse import SummaryReader
         log_dir = tmpdirs['torch'].name

         df = SummaryReader(log_dir).images
         image = df.loc[0, 'value']
         plt.imshow(image)

   .. group-tab:: TensorFlow2 / Keras

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         from tbparse import SummaryReader
         log_dir = tmpdirs['tensorflow'].name

         df = SummaryReader(log_dir).tensors
         image_dict_arr = df['value'].apply(SummaryReader.tensor_to_image)
         df['value'] = image_dict_arr.apply(lambda x: x['image'])
         image = df.loc[0, 'value']
         plt.imshow(image)

   .. group-tab:: TensorboardX

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         from tbparse import SummaryReader
         log_dir = tmpdirs['tensorboardX'].name

         df = SummaryReader(log_dir).images
         image = df.loc[0, 'value']
         plt.imshow(image)
