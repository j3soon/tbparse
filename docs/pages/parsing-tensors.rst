.. _tbparse_parsing-tensors:

===================================
Parsing Tensors
===================================

This page demonstrates the parsing process for tensor events.

.. contents:: Table of Contents
    :depth: 2
    :local:

Preparing Sample Event Logs
===================================

First, let's import some libraries and prepare the environment:

.. plot::
   :context: close-figs

   >>> import os
   >>> import tempfile
   >>> import pandas as pd
   >>> # Define some constants
   >>> N_RUNS = 2
   >>> N_EVENTS = 3
   >>> # Prepare temp dirs for storing event files
   >>> tmpdirs = {}

Before parsing a event file, we need to generate it first. The sample
event files are generated by three commonly used event log writers.

.. tabs::

   .. group-tab:: PyTorch

      We can generate the events by
      `PyTorch <https://pytorch.org/docs/stable/tensorboard.html>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['torch'] = tempfile.TemporaryDirectory()
         >>> from torch.utils.tensorboard import SummaryWriter
         >>> log_dir = tmpdirs['torch'].name
         >>> for i in range(N_RUNS): # 2 independent runs
         ...   writer = SummaryWriter(os.path.join(log_dir, f'run{i}'))
         ...   for j in range(N_EVENTS): # stores 2 tags, each with 3 events
         ...     writer.add_scalar('y=2x+C', j * 2 + i, j, new_style=True)
         ...     writer.add_scalar('y=3x+C', j * 3 + i, j, new_style=True)
         ...   writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).tensors
            step      y=2x+C      y=3x+C
         0     0  [0.0, 1.0]  [0.0, 1.0]
         1     1  [2.0, 3.0]  [3.0, 4.0]
         2     2  [4.0, 5.0]  [6.0, 7.0]

   .. group-tab:: TensorFlow / Keras

      We can generate the events by
      `TensorFlow / Keras <https://www.tensorflow.org/tensorboard/get_started>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['tensorflow'] = tempfile.TemporaryDirectory()
         >>> import tensorflow as tf
         >>> log_dir = tmpdirs['tensorflow'].name
         >>> for i in range(N_RUNS): # 2 independent runs
         ...   writer = tf.summary.create_file_writer(os.path.join(log_dir, f'run{i}'))
         ...   writer.set_as_default()
         ...   for j in range(N_EVENTS): # stores 2 tags, each with 3 events
         ...     assert tf.summary.scalar('y=2x+C', j * 2 + i, j)
         ...     assert tf.summary.scalar('y=3x+C', j * 3 + i, j)
         ...   writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).tensors
            step      y=2x+C      y=3x+C
         0     0  [0.0, 1.0]  [0.0, 1.0]
         1     1  [2.0, 3.0]  [3.0, 4.0]
         2     2  [4.0, 5.0]  [6.0, 7.0]

   .. group-tab:: TensorboardX

      .. WARNING:: TensorboardX does not support logging tensors.
         You should refer to :ref:`tbparse_parsing-scalars` page if
         you are using TensorboardX.

Parsing Event Logs
===================================

Import the :class:`tbparse.SummaryReader` class and prepare the log file paths
for reading event logs.

In the following samples, we use the event files generated by PyTorch for
simplicity. Event files generated by TensorFlow can be
similarily parsed without any modification.

.. plot::
   :context: close-figs

   >>> from tbparse import SummaryReader
   >>> log_dir = tmpdirs['torch'].name
   >>> run_dir = os.path.join(log_dir, 'run0')
   >>> event_file = os.path.join(run_dir, sorted(os.listdir(run_dir))[0])

Now we load the event logs as :class:`pandas.DataFrame`.

Load Event File
-----------------------------------

We can load a single event file.

.. tabs::

   .. group-tab:: Long Format

      >>> reader = SummaryReader(event_file) # long format
      >>> reader.tensors
         step     tag  value
      0     0  y=2x+C    0.0
      1     1  y=2x+C    2.0
      2     2  y=2x+C    4.0
      3     0  y=3x+C    0.0
      4     1  y=3x+C    3.0
      5     2  y=3x+C    6.0
      >>> df = reader.tensors
      >>> df[df['tag'] == 'y=2x+C'] # filter out 'y=3x+C'
         step     tag  value
      0     0  y=2x+C    0.0
      1     1  y=2x+C    2.0
      2     2  y=2x+C    4.0
      >>> df[df['tag'] == 'y=2x+C']['value'] # as pandas.Series
      0    0.0
      1    2.0
      2    4.0
      Name: value, dtype: float64
      >>> df[df['tag'] == 'y=2x+C']['value'].to_numpy() # as numpy array
      array([0., 2., 4.])
      >>> df[df['tag'] == 'y=2x+C']['value'].to_list() # as list
      [0.0, 2.0, 4.0]

   .. group-tab:: Wide Format

      >>> reader = SummaryReader(event_file, pivot=True) # wide format
      >>> reader.tensors
         step  y=2x+C  y=3x+C
      0     0     0.0     0.0
      1     1     2.0     3.0
      2     2     4.0     6.0
      >>> reader.tensors[['step', 'y=2x+C']] # filter out 'y=3x+C'
         step  y=2x+C
      0     0     0.0
      1     1     2.0
      2     2     4.0
      >>> reader.tensors['y=2x+C'] # as pandas.Series
      0    0.0
      1    2.0
      2    4.0
      Name: y=2x+C, dtype: float64
      >>> reader.tensors['y=2x+C'].to_numpy() # as numpy array
      array([0., 2., 4.])
      >>> reader.tensors['y=2x+C'].to_list() # as list
      [0.0, 2.0, 4.0]

Load Run Directory
-----------------------------------

We can load all event files under a directory (an experiment run)

.. tabs::

   .. group-tab:: Long Format

      >>> reader = SummaryReader(run_dir)
      >>> reader.tensors
         step     tag  value
      0     0  y=2x+C    0.0
      1     1  y=2x+C    2.0
      2     2  y=2x+C    4.0
      3     0  y=3x+C    0.0
      4     1  y=3x+C    3.0
      5     2  y=3x+C    6.0

   .. group-tab:: Wide Format

      >>> reader = SummaryReader(run_dir, pivot=True)
      >>> reader.tensors
         step  y=2x+C  y=3x+C
      0     0     0.0     0.0
      1     1     2.0     3.0
      2     2     4.0     6.0

Load Log Directory
-----------------------------------

We can further load all runs under the root log directory.

.. tabs::

   .. group-tab:: Long Format

      >>> reader = SummaryReader(log_dir)
      >>> reader.tensors
          step     tag  value
      0      0  y=2x+C    0.0
      1      0  y=2x+C    1.0
      2      1  y=2x+C    2.0
      3      1  y=2x+C    3.0
      4      2  y=2x+C    4.0
      5      2  y=2x+C    5.0
      6      0  y=3x+C    0.0
      7      0  y=3x+C    1.0
      8      1  y=3x+C    3.0
      9      1  y=3x+C    4.0
      10     2  y=3x+C    6.0
      11     2  y=3x+C    7.0
      >>> reader = SummaryReader(log_dir, extra_columns={'dir_name'}) # with event dir name
      >>> reader.tensors
          step     tag  value dir_name
      0      0  y=2x+C    0.0     run0
      1      1  y=2x+C    2.0     run0
      2      2  y=2x+C    4.0     run0
      3      0  y=3x+C    0.0     run0
      4      1  y=3x+C    3.0     run0
      5      2  y=3x+C    6.0     run0
      6      0  y=2x+C    1.0     run1
      7      1  y=2x+C    3.0     run1
      8      2  y=2x+C    5.0     run1
      9      0  y=3x+C    1.0     run1
      10     1  y=3x+C    4.0     run1
      11     2  y=3x+C    7.0     run1
      >>> df = reader.tensors
      >>> df[df['dir_name'] == 'run0'] # filter events in run0
         step     tag  value dir_name
      0     0  y=2x+C    0.0     run0
      1     1  y=2x+C    2.0     run0
      2     2  y=2x+C    4.0     run0
      3     0  y=3x+C    0.0     run0
      4     1  y=3x+C    3.0     run0
      5     2  y=3x+C    6.0     run0

   .. group-tab:: Wide Format

      >>> reader = SummaryReader(log_dir, pivot=True)
      >>> reader.tensors
         step      y=2x+C      y=3x+C
      0     0  [0.0, 1.0]  [0.0, 1.0]
      1     1  [2.0, 3.0]  [3.0, 4.0]
      2     2  [4.0, 5.0]  [6.0, 7.0]
      >>> reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'}) # with event dir name
      >>> reader.tensors
         step  y=2x+C  y=3x+C dir_name
      0     0     0.0     0.0     run0
      1     1     2.0     3.0     run0
      2     2     4.0     6.0     run0
      3     0     1.0     1.0     run1
      4     1     3.0     4.0     run1
      5     2     5.0     7.0     run1
      >>> df = reader.tensors
      >>> df[df['dir_name'] == 'run0'] # filter events in run0
         step  y=2x+C  y=3x+C dir_name
      0     0     0.0     0.0     run0
      1     1     2.0     3.0     run0
      2     2     4.0     6.0     run0

Plotting Events
===================================

We recommend using :std:doc:`seaborn <seaborn:examples/index>` for most plotting, since its API is both
flexible and friendly. When you need to tweak some details of the figure, you can directly
use the underlying :std:doc:`matplotlib <matplotlib:gallery/index>` APIs.
:std:doc:`pandas <pandas:user_guide/index>` also
supports flexible plotting with :meth:`pandas.DataFrame.plot` or
:meth:`pandas.Series.plot`, but I personally uses :std:doc:`seaborn <seaborn:examples/index>` more
often.

If you are dealing with more sophisticated plots that require advanced
filtering not shown in this page,
you might want to refer to the following guides:

* More column options: the `columns` option in :class:`tbparse.SummaryReader`
* :std:doc:`Indexing and selecting data <pandas:user_guide/indexing>`
* :std:doc:`MultiIndex / advanced indexing <pandas:user_guide/advanced>`
* Filtering with RegEx: the `regex` option in :meth:`pandas.Series.str.contains`

Plotting with matplotlib
-----------------------------------

We can plot all scalar logs in a single run.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['dir_name'] == 'run0']
         df_2x = df[df['tag'] == 'y=2x+C']
         df_3x = df[df['tag'] == 'y=3x+C']
         plt.plot(df_2x['step'], df_2x['value'])
         plt.plot(df_3x['step'], df_3x['value'])
         plt.xlabel('x')
         plt.ylabel('y')
         plt.legend(['y=2x+C', 'y=3x+C'])
         plt.title('run0')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['dir_name'] == 'run0']
         plt.plot(df['step'], df['y=2x+C'])
         plt.plot(df['step'], df['y=3x+C'])
         plt.xlabel('x')
         plt.ylabel('y')
         plt.legend(['y=2x+C', 'y=3x+C'])
         plt.title('run0')

We can compare tensors across runs.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         run0 = df[df['dir_name'] == 'run0']
         run1 = df[df['dir_name'] == 'run1']
         run0_2x = run0[run0['tag'] == 'y=2x+C']
         run1_2x = run1[run1['tag'] == 'y=2x+C']
         plt.plot(run0_2x['step'], run0_2x['value'])
         plt.plot(run1_2x['step'], run1_2x['value'])
         plt.xlabel('x')
         plt.ylabel('y')
         plt.legend(['run0', 'run1'])
         plt.title('y=2x+C')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         run0 = df[df['dir_name'] == 'run0']
         run1 = df[df['dir_name'] == 'run1']
         plt.plot(run0['step'], run0['y=2x+C'])
         plt.plot(run1['step'], run1['y=2x+C'])
         plt.xlabel('x')
         plt.ylabel('y')
         plt.legend(['run0', 'run1'])
         plt.title('y=2x+C')

Matplotlib prefers wide format in general.

Plotting with seaborn
-----------------------------------

We can plot all scalar logs in a single run.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['dir_name'] == 'run0']
         g = sns.lineplot(data=df, x='step', y='value', hue='tag')
         g.set(title='run0')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['dir_name'] == 'run0']
         g = sns.lineplot(data=df, x='step', y='y=2x+C')
         g = sns.lineplot(data=df, x='step', y='y=3x+C')
         g.legend(['y=2x+C', 'y=3x+C'])
         g.set(ylabel='value', title='run0')

We can compare tensors across runs.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['tag'] == 'y=2x+C']
         g = sns.lineplot(data=df, x='step', y='value', hue='dir_name')
         g.set(title='y=2x+C')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         g = sns.lineplot(data=df, x='step', y='y=2x+C', hue='dir_name')
         g.set(ylabel='value', title='y=2x+C')

We can compare all scalar logs across runs with shaded confidence interval.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         g = sns.lineplot(data=df, x='step', y='value', hue='tag')
         g.set(title='confidence interval of multiple runs')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         import seaborn as sns
         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         g = sns.lineplot(data=df, x='step', y='y=2x+C')
         g = sns.lineplot(data=df, x='step', y='y=3x+C')
         g.legend(['y=2x+C', 'y=3x+C'])
         g.set(ylabel='value', title='confidence interval of multiple runs')

Seaborn prefers long format in general.

Plotting with pandas
-----------------------------------

We can plot all scalar logs in a single run.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         df.set_index('step', inplace=True)
         df = df[df['dir_name'] == 'run0']
         df_2x = df[df['tag'] == 'y=2x+C']
         df_3x = df[df['tag'] == 'y=3x+C']
         ax = df_2x.plot.line(title='run0')
         df_3x.plot.line(ax=ax)
         ax.legend(['y=2x+C', 'y=3x+C'])

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         df.set_index('step', inplace=True)
         df = df[df['dir_name'] == 'run0']
         df.plot.line(title='run0')

We can compare tensors across runs.

.. tabs::

   .. group-tab:: Long Format

      .. plot::
         :context: close-figs

         reader = SummaryReader(log_dir, extra_columns={'dir_name'})
         df = reader.tensors
         df = df[df['tag'] == 'y=2x+C']
         run0 = df.loc[df['dir_name'] == 'run0', ['step', 'value']].rename(columns={'value': 'run0'})
         run1 = df.loc[df['dir_name'] == 'run1', ['step', 'value']].rename(columns={'value': 'run1'})
         df = run0.merge(run1, how='outer', on='step', suffixes=(False, False))
         df.set_index('step', inplace=True)
         df.plot.line(title='y=2x+C')

   .. group-tab:: Wide Format

      .. plot::
         :context: close-figs

         reader = SummaryReader(log_dir, pivot=True, extra_columns={'dir_name'})
         df = reader.tensors
         run0 = df.loc[df['dir_name'] == 'run0', ['step', 'y=2x+C']].rename(columns={'y=2x+C': 'run0'})
         run1 = df.loc[df['dir_name'] == 'run1', ['step', 'y=2x+C']].rename(columns={'y=2x+C': 'run1'})
         df = run0.merge(run1, how='outer', on='step', suffixes=(False, False))
         df.set_index('step', inplace=True)
         df.plot.line(title='y=2x+C')

Pandas prefers wide format in general.