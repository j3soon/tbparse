.. _tbparse_parsing-histograms:

===================================
Parsing Histograms
===================================

This page demonstrates the parsing process for histogram events.

.. contents:: Table of Contents
    :depth: 2
    :local:

Preparing Sample Event Logs
===================================

First, let's import some libraries and prepare the environment:

.. plot::
   :context: close-figs

   >>> import os
   >>> import tempfile
   >>> import numpy as np
   >>> import pandas as pd
   >>> # Define some constants
   >>> RND_STATE = 1234
   >>> N_EVENTS = 10
   >>> N_PARTICLES = 1000
   >>> MU = 0
   >>> SIGMA = 2
   >>> # Prepare temp dirs for storing event files
   >>> tmpdirs = {}

Before parsing a event file, we need to generate it first. The
event files are generated by three commonly used event log writers.

.. tabs::

   .. group-tab:: PyTorch

      We can generate the events by
      `PyTorch <https://pytorch.org/docs/stable/tensorboard.html>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['torch'] = tempfile.TemporaryDirectory()
         >>> from torch.utils.tensorboard import SummaryWriter
         >>> log_dir = tmpdirs['torch'].name
         >>> writer = SummaryWriter(log_dir)
         >>> rng = np.random.RandomState(RND_STATE)
         >>> for i in range(N_EVENTS):
         ...   x = rng.normal(MU, SIGMA, size=N_PARTICLES)
         ...   writer.add_histogram('dist', x + i, i)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).histograms.columns
         Index(['step', 'dist/limits', 'dist/counts'], dtype='object')

   .. group-tab:: TensorFlow / Keras

      We can generate the events by
      `TensorFlow / Keras <https://www.tensorflow.org/tensorboard/get_started>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['tensorflow'] = tempfile.TemporaryDirectory()
         >>> import tensorflow as tf
         >>> log_dir = tmpdirs['tensorflow'].name
         >>> writer = tf.summary.create_file_writer(log_dir)
         >>> writer.set_as_default()
         >>> rng = np.random.RandomState(RND_STATE)
         >>> for i in range(N_EVENTS):
         ...   x = rng.normal(MU, SIGMA, size=N_PARTICLES)
         ...   assert tf.summary.histogram('dist', x + i, i)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).tensors.columns
         Index(['step', 'dist'], dtype='object')

      .. WARNING:: In the new versions of TensorFlow, the ``histograms`` are actually
         stored as ``tensors`` inside the event file. Therefore, you should perform
         an extra step with :meth:`~tbparse.SummaryReader.buckets_to_histogram_dict` before
         plotting if you are using TensorFlow. (An example is shown later)

   .. group-tab:: TensorboardX

      We can generate the events by
      `TensorboardX <https://tensorboardx.readthedocs.io/en/latest/tutorial.html>`_:

      .. plot::
         :context: close-figs

         >>> tmpdirs['tensorboardX'] = tempfile.TemporaryDirectory()
         >>> from tensorboardX import SummaryWriter
         >>> log_dir = tmpdirs['tensorboardX'].name
         >>> writer = SummaryWriter(log_dir)
         >>> rng = np.random.RandomState(RND_STATE)
         >>> for i in range(N_EVENTS):
         ...   x = rng.normal(MU, SIGMA, size=N_PARTICLES)
         ...   writer.add_histogram('dist', x + i, i)
         >>> writer.close()

      and quickly check the results:

         >>> from tbparse import SummaryReader
         >>> SummaryReader(log_dir, pivot=True).histograms.columns
         Index(['step', 'dist/limits', 'dist/counts'], dtype='object')

Parsing Event Logs
===================================

Import the :class:`tbparse.SummaryReader` class and prepare the log file paths
for reading event logs.

In the following samples, we use the event files generated by PyTorch for
simplicity. Event files generated by TensorboardX can be
similarily parsed without modifications.

Now we load the event logs as :class:`pandas.DataFrame`.

Load File / Directory
-----------------------------------

.. tabs::

   .. group-tab:: PyTorch

      .. plot::
         :context: close-figs

         >>> from tbparse import SummaryReader
         >>> log_dir = tmpdirs['torch'].name
         >>> SummaryReader(log_dir).histograms.columns # wide format
         Index(['step', 'tag', 'limits', 'counts'], dtype='object')
         >>> SummaryReader(log_dir, pivot=True).histograms.columns # long format
         Index(['step', 'dist/limits', 'dist/counts'], dtype='object')

   .. group-tab:: TensorFlow / Keras

      .. plot::
         :context: close-figs

         >>> from tbparse import SummaryReader
         >>> log_dir = tmpdirs['tensorflow'].name
         >>> SummaryReader(log_dir).tensors.columns # wide format
         Index(['step', 'tag', 'value'], dtype='object')
         >>> SummaryReader(log_dir, pivot=True).tensors.columns # long format
         Index(['step', 'dist'], dtype='object')


Plotting Events
===================================

We recommend using :std:doc:`seaborn <seaborn:examples/index>` for most plotting, since its API is both
flexible and friendly. When you need to tweak some details of the figure, you can directly
use the underlying :std:doc:`matplotlib <matplotlib:gallery/index>` APIs.
:std:doc:`pandas <pandas:user_guide/index>` also
supports flexible plotting with :meth:`pandas.DataFrame.plot` or
:meth:`pandas.Series.plot`, but I personally uses :std:doc:`seaborn <seaborn:examples/index>` more
often.

If you are dealing with more sophisticated plots that require advanced
filtering not shown in this page,
you might want to refer to the following guides:

* More column options: the `columns` option in :class:`tbparse.SummaryReader`
* :std:doc:`Indexing and selecting data <pandas:user_guide/indexing>`
* :std:doc:`MultiIndex / advanced indexing <pandas:user_guide/advanced>`
* Filtering with RegEx: the `regex` option in :meth:`pandas.Series.str.contains`

Plotting a Distribution
-----------------------------------

.. tabs::

   .. group-tab:: Target

      The plotting code without logging with tensorboard:

      .. plot::
         :context: close-figs

         import scipy.stats
         import matplotlib.pyplot as plt
         rng = np.random.RandomState(RND_STATE)
         x = rng.normal(MU, SIGMA, size=N_PARTICLES)
         counts, limits = np.histogram(x)
         hist = (counts, limits)
         hist_dist = scipy.stats.rv_histogram(hist)
         centers = (limits[1:]+limits[:-1])/2
         pdf = hist_dist.pdf(centers)
         cdf = hist_dist.cdf(centers)
         plt.plot(centers, pdf)
         plt.plot(centers, cdf)
         plt.hist(x, density=True)
         plt.title('dist0')
         plt.show()

   .. group-tab:: PyTorch

      The plotting code reading from tensorboard event logs:

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         log_dir = tmpdirs['torch'].name
         reader = SummaryReader(log_dir, pivot=True)
         df = reader.histograms
         df.set_index('step', inplace=True)
         counts0 = df.at[0, 'dist/counts']
         limits0 = df.at[0, 'dist/limits']
         # draw PDF
         x = np.linspace(limits0[0], limits0[-1], 11)
         x, y = SummaryReader.histogram_to_pdf(counts0, limits0, x)
         plt.plot(x, y)
         # draw CDF
         x = np.linspace(limits0[0], limits0[-1], 1000)
         y = SummaryReader.histogram_to_cdf(counts0, limits0, x)
         plt.plot(x, y)
         plt.title('dist0')
         plt.show()

   .. group-tab:: TensorFlow / Keras

      The plotting code reading from tensorboard event logs:

      .. plot::
         :context: close-figs

         import matplotlib.pyplot as plt
         log_dir = tmpdirs['tensorflow'].name
         reader = SummaryReader(log_dir, pivot=True)
         df = reader.tensors
         buckets0 = df.at[0, 'dist']
         hist_dict0 = SummaryReader.buckets_to_histogram_dict(buckets0)
         counts0 = hist_dict0['counts']
         limits0 = hist_dict0['limits']
         # draw PDF
         x = np.linspace(limits0[0], limits0[-1], 11)
         x, y = SummaryReader.histogram_to_pdf(counts0, limits0, x)
         plt.plot(x, y)
         # draw CDF
         x = np.linspace(limits0[0], limits0[-1], 1000)
         y = SummaryReader.histogram_to_cdf(counts0, limits0, x)
         plt.plot(x, y)
         plt.title('dist0')
         plt.show()

Reference: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.rv_histogram.html

Plotting Multiple (Stacked) Distributions
---------------------------------------------

.. tabs::

   .. group-tab:: PyTorch

      .. plot::
         :context: close-figs

         import seaborn as sns
         import matplotlib.pyplot as plt
         log_dir = tmpdirs['torch'].name
         reader = SummaryReader(log_dir, pivot=True)
         df = reader.histograms
         # Set background
         sns.set_theme(style="white", rc={"axes.facecolor": (0, 0, 0, 0)})
         # Choose color palettes for the distributions
         pal = sns.color_palette("Oranges", 20)[5:-5]
         # Initialize the FacetGrid object (stacking multiple plots)
         g = sns.FacetGrid(df, row='step', hue='step', aspect=15, height=.5, palette=pal)

         def plot_subplots(x, color, label, data):
           ax = plt.gca()
           ax.text(0, .2, label, fontweight="bold", color=color,
                   ha="left", va="center", transform=ax.transAxes)
           counts = data['dist/counts'].iloc[0]
           limits = data['dist/limits'].iloc[0]
           x = np.linspace(limits[0], limits[-1], 11)
           x, y = SummaryReader.histogram_to_pdf(counts, limits, x)
           # Draw the densities in a few steps
           sns.lineplot(x=x, y=y, clip_on=False, color="w", lw=2)
           ax.fill_between(x, y, color=color)
         # Plot each subplots with df[df['step']==i]
         g.map_dataframe(plot_subplots, None)

         # Add a bottom line for each subplot
         # passing color=None to refline() uses the hue mapping
         g.refline(y=0, linewidth=2, linestyle="-", color=None, clip_on=False)
         # Set the subplots to overlap
         g.figure.subplots_adjust(hspace=-.25)
         # Remove axes details that don't play well with overlap
         g.set_titles("")
         g.set(yticks=[], xlabel="", ylabel="")
         g.despine(bottom=True, left=True)

      .. plot::
         :context: close-figs
         :include-source: false

         # Reset to default matplotlib theme
         import matplotlib as mpl
         mpl.rcParams.update(mpl.rcParamsDefault)

   .. group-tab:: TensorFlow / Keras

      .. plot::
         :context: close-figs

         import seaborn as sns
         import matplotlib.pyplot as plt
         log_dir = tmpdirs['tensorflow'].name
         reader = SummaryReader(log_dir, pivot=True)
         df = reader.tensors
         # Set background
         sns.set_theme(style="white", rc={"axes.facecolor": (0, 0, 0, 0)})
         # Choose color palettes for the distributions
         pal = sns.color_palette("Oranges", 20)[5:-5]
         # Initialize the FacetGrid object (stacking multiple plots)
         g = sns.FacetGrid(df, row='step', hue='step', aspect=15, height=.5, palette=pal)

         def plot_subplots(x, color, label, data):
           ax = plt.gca()
           ax.text(0, .2, label, fontweight="bold", color=color,
                   ha="left", va="center", transform=ax.transAxes)
           buckets = data['dist'].iloc[0]
           hist_dict = SummaryReader.buckets_to_histogram_dict(buckets)
           counts = hist_dict['counts']
           limits = hist_dict['limits']
           x = np.linspace(limits[0], limits[-1], 11)
           x, y = SummaryReader.histogram_to_pdf(counts, limits, x)
           # Draw the densities in a few steps
           sns.lineplot(x=x, y=y, clip_on=False, color="w", lw=2)
           ax.fill_between(x, y, color=color)
         # Plot each subplots with df[df['step']==i]
         g.map_dataframe(plot_subplots, None)

         # Add a bottom line for each subplot
         # passing color=None to refline() uses the hue mapping
         g.refline(y=0, linewidth=2, linestyle="-", color=None, clip_on=False)
         # Set the subplots to overlap
         g.figure.subplots_adjust(hspace=-.25)
         # Remove axes details that don't play well with overlap
         g.set_titles("")
         g.set(yticks=[], xlabel="", ylabel="")
         g.despine(bottom=True, left=True)

      .. plot::
         :context: close-figs
         :include-source: false

         # Reset to default matplotlib theme
         import matplotlib as mpl
         mpl.rcParams.update(mpl.rcParamsDefault)

Reference: https://seaborn.pydata.org/examples/kde_ridgeplot.html